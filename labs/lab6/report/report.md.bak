---
## Front matter
title: "Отчёт по лабораторной работе №5"
subtitle: "дисциплина: Информационная безопасность"
author: "Абрамян Артём Арменович"

## Generic otions
lang: ru-RU
toc-title: "Содержание"

## Bibliography
bibliography: bib/cite.bib
csl: pandoc/csl/gost-r-7-0-5-2008-numeric.csl

## Pdf output format
toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: true # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
  options:
	- spelling=modern
	- babelshorthands=true
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
## Fonts
mainfont: PT Serif
romanfont: PT Serif
sansfont: PT Sans
monofont: PT Mono
mainfontoptions: Ligatures=TeX
romanfontoptions: Ligatures=TeX
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase
monofontoptions: Scale=MatchLowercase,Scale=0.9
## Biblatex
biblatex: true
biblio-style: "gost-numeric"
biblatexoptions:
  - parentracker=true
  - backend=biber
  - hyperref=auto
  - language=auto
  - autolang=other*
  - citestyle=gost-numeric
## Pandoc-crossref LaTeX customization
figureTitle: "Рис."
tableTitle: "Таблица"
listingTitle: "Листинг"
lofTitle: "Список иллюстраций"
lotTitle: "Список таблиц"
lolTitle: "Листинги"
## Misc options
indent: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{float} # keep figures where there are in the text
  - \floatplacement{figure}{H} # keep figures where there are in the text
---

# Цель работы

Изучение механизмов изменения идентификаторов, применения SetUID- и
Sticky-битов. Получение практических навыков работы в консоли с дополнительными атрибутами. Рассмотрение работы механизма смены идентификатора
процессов пользователей, а также влияние бита Sticky на запись и удаление
файлов.

# Теоретическое введение

Выполнение работы возможно как в дисплейном классе факультета
физико-математических и естественных наук РУДН, так и дома. Описание
выполнения работы приведено для дисплейного класса со следующими характеристиками:
– Intel Core i3-550 3.2 GHz, 4 GB оперативной памяти, 20 GB свободного
места на жёстком диске;
– ОС Linux Gentoo (http://www.gentoo.ru/);
– VirtualBox верс. 6.1 или старше;
– каталог с образами ОС для работающих в дисплейном классе:
/afs/dk.sci.pfu.edu.ru/common/files/iso/.

В операционной системе Linux есть много отличных функций безопасности, но
одна из самых важных - это система прав доступа к файлам. Изначально каждый
файл имел три параметра доступа:
Чтение - разрешает получать содержимое файла, но на запись нет. Для
каталога позволяет получить список файлов и каталогов, расположенных в
нем
Запись - разрешает записывать новые данные в файл или изменять существующие, а также позволяет создавать и изменять файлы и каталоги
Выполнение - невозможно выполнить программу, если у нее нет флага
выполнения. Этот атрибут устанавливается для всех программ и скриптов, именно с помощью него система может понять, что этот файл нужно
запускать как программу
Каждый файл имеет три категории пользователей, для которых можно устанавливать различные сочетания прав доступа:

Владелец - набор прав для владельца файла, пользователя, который его
создал или сейчас установлен его владельцем. Обычно владелец имеет все
права, чтение, запись и выполнение
Группа - любая группа пользователей, существующая в системе и привязанная к файлу. Но это может быть только одна группа и обычно это группа
владельца, хотя для файла можно назначить и другую группу
Остальные - все пользователи, кроме владельца и пользователей, входящих
в группу файла

Команды, которые могут понадобиться при работе с правами доступа:
“ls -l” - для просмотра прав доступа к файлам и каталогам
“chmod категория действие флаг файл или каталог” - для изменения прав
доступа к файлам и каталогам (категорию действие и флаг можно заменить
на набор из трех цифр от 0 до 7)
Значения флагов прав:
— - нет никаких прав
–x - разрешено только выполнение файла, как программы, но не изменение
и не чтение
-w- - разрешена только запись и изменение файла
-wx - разрешено изменение и выполнение, но в случае с каталогом, невозможно посмотреть его содержимое
r– - права только на чтение
r-x - только чтение и выполнение, без права на запись
rw- - права на чтение и запись, но без выполнения
rwx - все права


# Выполнение лабораторной работы

1. Убедился, что компилятор gcc установлен, исолпьзуя команду
“gcc -v”. Затем отключил систему запретов до очередной перезагрузки системы
командой “sudo setenforce 0”, после чего команда “getenforce” вывела “Permissive”
 (рис. \ref{img1}) 

![Предварительная подготовка\label{img1}](image/img1.png){ width=70% }


2. Проверил успешное выполнение команд “whereis gcc” и “whereis g++”.
 (рис. \ref{img2})

![Команда “whereis”\label{img2}](image/img2.png){ width=70% }


3. Вошел в систему от имени пользователя guest командой “su - guest”. 
Создал программу simpleid.c командой “touch simpleid.c” и открыл её в редакторе
командой “gedit /home/guest/simpleid.c”   (рис. \ref{img3})

![Вход в систему и создание программы\label{img3}](image/img3.png){ width=70% }

4. Скомпилировал программу и убедился, что файл программы был создан
командой “gcc simpleid.c -o simpleid”. Выполнил программу simpleid командой
“./simpleid”, а затем выполнил системную программу id командой “id”. Результаты, полученные в результате выполнения обеих команд, совпадают (uid=1001 и
gid=1001) (рис. \ref{img4}) 

![Компиляция и выполнение программы simpleid\label{img4}](image/img4.png){ width=70% }
![Код программы\label{img5}](image/img5.png){ width=70% }


5. От имени суперпользователя выполнил команды “sudo chown root:guest
/home/guest/simpleid2” и “sudo chmod u+s /home/guest/simpleid2”, затем выполнил проверку правильности установки новых атрибутов и смены владельца
файла simpleid2 командой “sudo ls -l /home/guest/simpleid2”. Этими
командами была произведена смена пользователя файла на root и установлен
SetUID-бит. (рис. \ref{img5})

![Установка новых атрибутов (SetUID) и смена владельца файла\label{img6}](image/img6.png){ width=70% }


6. Поменял владельца у программы readfile и устанавил SetUID. Проверил, может ли программа readfile прочитать файл readfile.c командой “./readfile readfile.c”.
Прочитать удалось. Проверил, можно ли прочитать файл /etc/shadow.
Прочитать удалось (рис. \ref{img6})

![Запуск программы readfile\label{img6}](image/img6.png){ width=70% }

7. Командой “ls -l / | grep tmp” убедился, что атрибут Sticky на директории /tmp
установлен. От имени пользователя guest создал файл file01.txt в директории
/tmp со словом test командой “echo”test” > /tmp/file01.txt”. Просмотрел атрибуты
у только что созданного файла и разрешил чтение и запись для категории
пользователей “все остальные” командами “ls -l /tmp/file01.txt” и “chmod o+rw
/tmp/file01.txt”  (рис. \ref{img7})

![Создание файла file01.txt\label{img6}](image/img6.png){ width=70% }


8. От имени пользователя guest2 попробовал прочитать файл командой “cat
/tmp/file01.txt” - это удалось. Далее попытался дозаписать в файл слово test2,
проверить содержимое файла и записать в файл слово test3, стерев при этом всю
имеющуюся в файле информацию - эти операции удалось выполнить только в
случае, если еще дополнительно разрешить чтение и запись для группы пользователей командой “chmod g+rw /tmp/file01.txt”. От имени пользователя guest2
попробовал удалить файл - это не удается ни в каком из случаев, возникает
ошибка (рис. \ref{img8})

![Попытка выполнить действия над файлом file01.txt от имени пользователя guest2\label{img6}](image/img6.png){ width=70% }

9. Повысил права до суперпользователя командой “su -” и выполнил команду,
снимающую атрибут t с директории /tmp “chmod -t /tmp”. После чего покинул
режим суперпользователя командой “exit”. Повторил предыдущие шаги. Теперь
мне удалось удалить файл file01.txt от имени пользователя, не являющегося его
владельцем  (рис. \ref{img9})

![Удаление атрибута t (Sticky-бита) и повторение действий\label{img6}](image/img6.png){ width=70% }


10. Повысил права до суперпользователя командой “su -” и выполнил команду,
снимающую атрибут t с директории /tmp “chmod -t /tmp”. После чего покинул
режим суперпользователя командой “exit”. Повторил предыдущие шаги. Теперь
мне удалось удалить файл file01.txt от имени пользователя, не являющегося его
владельцем.
Повысил свои права до суперпользователя и вернул атрибут t на директорию
/tmp  (рис. \ref{img9})

![Возвращение атрибута t (Sticky-бита)\label{img6}](image/img6.png){ width=70% }


# Выводы

В данной лабораторной работе мне успешно удалось Изучение механизмов изменения идентификаторов, применения SetUID- и
Sticky-битов. Получение практических навыков работы в консоли с дополнительными атрибутами. Рассмотрение работы механизма смены идентификатора
процессов пользователей, а также влияние бита Sticky на запись и удаление
файлов.

# Библиографический список

1. Документация Rocky (https://docs.rockylinux.org/)

